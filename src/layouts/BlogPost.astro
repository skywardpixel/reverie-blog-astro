---
import BaseLayout from './BaseLayout.astro';
import { format } from 'date-fns';
import type { CollectionEntry } from 'astro:content';

export interface Props {
  data: CollectionEntry<'blog'>['data'];
  readingTime?: string;
}

const { data, readingTime } = Astro.props;
const { title, description, publishDate, updatedDate, heroImage, tags } = data;

const formattedPublishDate = format(new Date(publishDate), 'MMMM dd, yyyy');
const formattedUpdatedDate = updatedDate
  ? format(new Date(updatedDate), 'MMMM dd, yyyy')
  : null;
---

<BaseLayout title={title} description={description} activeNav="blog">
  <article class="blog-post">
    <div class="hero-section">
      <div class="hero-content">
        <div class="container">
          <div class="post-meta">
            <time datetime={publishDate.toISOString()}>
              {formattedPublishDate}
            </time>
            {
              readingTime && (
                <>
                  <span class="meta-separator">•</span>
                  <span>{readingTime}</span>
                </>
              )
            }
            {
              formattedUpdatedDate && (
                <>
                  <span class="meta-separator">•</span>
                  <span>Updated {formattedUpdatedDate}</span>
                </>
              )
            }
          </div>
          <h1 class="post-title">{title}</h1>
          <p class="post-description">{description}</p>
          {
            tags.length > 0 && (
              <div class="post-tags">
                {tags.map(tag => (
                  <span class="btn-link">{tag}</span>
                ))}
              </div>
            )
          }
        </div>
      </div>
    </div>

    <div class="container">
      <div class="post-content-wrapper">
        <div class="post-content content">
          <slot />
        </div>

        <aside class="post-sidebar">
          <div class="toc-card">
            <h3>Table of Contents</h3>
            <nav class="toc-nav" id="toc-nav">
              <!-- TOC will be generated via JavaScript -->
            </nav>
          </div>

          <div class="share-card">
            <h3>Share</h3>
            <div class="share-buttons">
              <button
                class="btn-social-icon"
                data-share="twitter"
                aria-label="Share on Twitter"
              >
                <svg
                  width="20"
                  height="20"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <path
                    d="M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"
                  ></path>
                </svg>
              </button>

              <button
                class="btn-social-icon"
                data-share="copy"
                aria-label="Copy link"
              >
                <svg
                  width="20"
                  height="20"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <path
                    d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"
                  ></path>
                  <path
                    d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"
                  ></path>
                </svg>
              </button>
            </div>
          </div>
        </aside>
      </div>
    </div>

    <nav class="post-navigation">
      <div class="container">
        <div class="nav-links">
          <a href="/blog" class="nav-link nav-link-prev">
            <svg
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <line x1="19" y1="12" x2="5" y2="12"></line>
              <polyline points="12 19 5 12 12 5"></polyline>
            </svg>
            <span>Back to Blog</span>
          </a>
        </div>
      </div>
    </nav>
  </article>
</BaseLayout>

<style>
  .blog-post {
    position: relative;
    z-index: 2;
  }

  .hero-section {
    position: relative;
    margin-bottom: 1.5rem;
  }

  .hero-content {
    position: relative;
    padding: 5rem 0 2rem;
  }

  .post-meta {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    gap: 0.75rem;
    font-size: 0.9rem;
    color: var(--color-text-secondary);
    margin-bottom: 1rem;
  }

  .meta-separator {
    color: var(--color-text-tertiary);
  }

  .post-title {
    font-size: clamp(2rem, 5vw, 3.5rem);
    font-weight: 500;
    line-height: 1.1;
    margin-bottom: 0.75rem;
    font-family: var(--font-display);
    letter-spacing: -0.02em;
    background: linear-gradient(
      135deg,
      var(--color-text) 0%,
      var(--color-accent) 100%
    );
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  .post-description {
    font-size: 1.25rem;
    line-height: 1.6;
    color: var(--color-text-secondary);
    margin-bottom: 1.5rem;
    font-family: var(--font-serif);
    font-weight: 500;
  }

  /* Chinese post descriptions use sans-serif for better readability */
  .post-description:lang(zh),
  .post-description:lang(zh-CN),
  .post-description:lang(zh-TW),
  .post-description:lang(zh-HK) {
    font-family: var(--font-display);
    font-weight: 500;
    line-height: 1.7;
  }

  .post-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
  }

  /* Tags use unified btn-link class */

  .post-content-wrapper {
    display: grid;
    grid-template-columns: 1fr 300px;
    gap: 3rem;
    margin-bottom: 3rem;
  }

  .post-content {
    min-width: 0;
  }

  .content {
    background: rgba(255, 255, 255, 0.95);
    border: none;
    border-radius: 16px;
    padding: 2rem;
    font-family: var(--font-body);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    position: relative;
  }

  .content::before {
    display: none;
  }

  /* Heading styles now handled by global content system */

  /* Paragraph and list styles now handled by global content system */

  /* List styles now handled by global content system */

  /* Blockquote and code styles now handled by global content system */

  .post-content :global(hr) {
    border: none;
    height: 1px;
    background: linear-gradient(
      90deg,
      transparent,
      var(--color-border),
      transparent
    );
    margin: 3rem auto;
    max-width: 300px;
  }

  .post-content :global(img) {
    width: 100%;
    height: auto;
    border-radius: 8px;
    margin: 2rem 0;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
  }

  .post-content :global(a) {
    color: var(--color-accent);
    text-decoration: underline;
    text-underline-offset: 3px;
    text-decoration-thickness: 1px;
    transition: all 200ms;
  }

  .post-content :global(a:hover) {
    color: var(--color-accent-light);
    text-decoration-thickness: 2px;
  }

  .post-content :global(strong) {
    font-weight: 600;
    color: var(--color-text);
  }

  .post-content :global(em) {
    font-style: italic;
    color: var(--color-text-secondary);
  }

  /* Sidebar */
  .post-sidebar {
    position: sticky;
    top: 6rem;
    height: fit-content;
  }

  .toc-card,
  .share-card {
    background: rgba(255, 255, 255, 0.95);
    border: none;
    border-radius: 16px;
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
  }

  .toc-card h3,
  .share-card h3 {
    font-size: 1.25rem;
    margin-bottom: 1rem;
    color: var(--color-text);
    font-family: var(--font-display);
    font-weight: 600;
  }

  .toc-nav {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .share-buttons {
    display: flex;
    gap: 0.75rem;
  }

  /* Share buttons use unified btn-social-icon class */

  /* Post Navigation */
  .post-navigation {
    margin-top: 4rem;
    padding: 2rem 0;
  }

  .nav-links {
    display: flex;
    justify-content: space-between;
  }

  .nav-link {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem 1.25rem;
    background: rgba(255, 255, 255, 0.95);
    border: none;
    border-radius: 8px;
    color: var(--color-text);
    text-decoration: none;
    transition: all 200ms ease;
    font-family: var(--font-body);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
  }

  .nav-link:hover {
    background: rgba(255, 255, 255, 0.98);
    transform: translateX(-2px);
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);
  }

  /* Mobile styles */
  @media (max-width: 1024px) {
    .post-content-wrapper {
      grid-template-columns: 1fr;
    }

    .post-sidebar {
      display: none;
    }
  }

  /* Table of Contents Styles - Override global link styles */
  .toc-card {
    --local-link-color: var(--color-text-secondary);
    --local-link-decoration: none;
  }

  /* TOC styles moved to global.css to work with JS-generated content */

  @media (max-width: 768px) and (min-width: 641px) {
    .hero-content {
      padding: 2rem 0 1.75rem;
    }
  }

  @media (max-width: 640px) {
    .hero-content {
      padding: 1rem 0 1.5rem;
    }

    .post-meta {
      gap: 0.5rem;
    }

    .meta-separator {
      display: none;
    }

    .post-meta > *:not(:last-child):after {
      content: ' • ';
      color: var(--color-text-tertiary);
      margin-left: 0.5rem;
    }

    .content {
      padding: 1.5rem;
      border-radius: 12px;
    }

    .post-tags {
      gap: 0.5rem;
    }

    /* Tag responsive styles handled by unified btn-link class */

    .post-title {
      font-size: 2rem;
    }

    .post-description {
      font-size: 1.1rem;
    }

    /* Mobile scroll margin maintained for content */
    .content h1,
    .content h2,
    .content h3,
    .content h4,
    .content h5,
    .content h6 {
      scroll-margin-top: calc(var(--space-2xl) + var(--space-lg) + 1rem);
    }
  }
</style>

<script>
  // Generate table of contents
  document.addEventListener('DOMContentLoaded', () => {
    const tocNav = document.getElementById('toc-nav');
    const postContent = document.querySelector('.post-content');

    if (tocNav && postContent) {
      const headings = postContent.querySelectorAll('h2, h3');

      if (headings.length > 0) {
        headings.forEach((heading, index) => {
          // Add ID to heading if it doesn't have one
          if (!heading.id) {
            heading.id = `heading-${index}`;
          }

          // Create TOC link
          const link = document.createElement('a');
          link.href = `#${heading.id}`;
          link.textContent = heading.textContent;

          // Apply classes based on heading type
          if (heading.tagName === 'H2') {
            link.classList.add('toc-link', 'toc-h2');
          } else {
            link.classList.add('toc-link', 'toc-h3');
          }

          tocNav.appendChild(link);
        });
      }
    }
  });

  // Share functionality
  document.addEventListener('DOMContentLoaded', () => {
    const shareButtons = document.querySelectorAll(
      '.btn-social-icon[data-share]'
    );
    const pageUrl = window.location.href;
    const pageTitle = document.querySelector('.post-title')?.textContent || '';

    shareButtons.forEach(button => {
      button.addEventListener('click', () => {
        const shareType = (button as HTMLButtonElement).dataset.share;

        switch (shareType) {
          case 'twitter':
            window.open(
              `https://twitter.com/intent/tweet?text=${encodeURIComponent(pageTitle)}&url=${encodeURIComponent(pageUrl)}`,
              '_blank'
            );
            break;

          case 'copy':
            navigator.clipboard.writeText(pageUrl).then(() => {
              button.innerHTML =
                '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="20 6 9 17 4 12"></polyline></svg>';
              setTimeout(() => {
                button.innerHTML =
                  '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path><path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path></svg>';
              }, 2000);
            });
            break;
        }
      });
    });
  });
</script>
